//粒子组的CS文件，一开始初始化粒子组，整组粒子一同移动，到达条件后再单独移动

#include "../HLSL/ParticleInclude.hlsl"
#include "../HLSL/ParticleNoiseGroupInc.hlsl"

// //单个粒子需要的数据
// struct NoiseParticleData {
//     float4 random;          //xyz是随机数，w是目前存活时间
//     int2 index;             //状态标记，x是当前编号，y为是否存活(0为死亡)
//     float3 worldPos;        //当前位置
//     float4 uvTransData;     //uv动画需要的数据
//     float interpolation;    //插值需要的数据
//     float4 color;           //颜色值，包含透明度
//     float size;             //粒子大小
//     float3 nowSpeed;        //xyz是当前速度
// };

// //由组进行管理的粒子
// struct GroupControlParticle{
//     float2 lifeTime;    //x:组最大持续时间, y:死亡时间
// };


#pragma kernel Noise_PerFrame

//逐帧刷新的方法，用来控制与渲染直接相关的数据
[numthreads(64, 1, 1)]
void Noise_PerFrame(int3 gid : SV_GroupID, int index : SV_GroupIndex)
{
    int objIndex = gid.x * 64 + index;

    NoiseParticleData particle = _ParticleNoiseBuffer[objIndex];
    GroupControlParticle group = _GroupControlBuffer[gid.x];

    //组的存活时间结束, 该粒子也就结束了
    if(group.dieTime <= _Time.x){
        particle.index.y = 0;   //标记为死亡
        //为了方便粒子在不同时机释放，这里使用随机数的w轴来存储时间，为了避免出错，只在这里清除存在时间
        particle.random.w = 0;  
        _ParticleNoiseBuffer[objIndex] = particle;
        group.currentMode.x = 0;    //初始化组数据
        _GroupControlBuffer[gid.x] = group;
        return;
    }

    if(index == 0){         //只有第一个粒子才有权利更改组数据
        if(group.currentMode.x == 0){//粒子组初始化
            InitialGroup(group, _ParticleNoiseBuffer[gid.x * 64].random.xyz);
        }
        //超过组存在的最大时间，切换到自由阶段
        if(group.currentMode.x == 1 && group.dieTime - _LifeTime.y < _Time.x){
            group.currentMode.x = 2;
        }
        if(group.currentMode.x == 1){
            group.worldPos += group.currentSpeed * _Time.y;
        }
        _GroupControlBuffer[gid.x] = group;
    }

    //根据模式进行该粒子的位置设置
    switch(group.currentMode.x){
        case 0:
            return;
        case 1:     //组阶段，粒子位置设置在组周围
            InitialParticleBesideGroup(particle, group);
            break;
        default:
            OnFreedomParticle(particle, group);
            break;

    }
    _ParticleNoiseBuffer[objIndex] = particle;
}

#pragma kernel Noise_PerFixFrame
//粒子重力没必要这么大
#define GRAVITY 4.4

[numthreads(64, 1, 1)]
void Noise_PerFixFrame(int3 gid : SV_GroupID, int index : SV_GroupIndex){

    int objIndex = gid.x * 64 + index;

    NoiseParticleData particle = _ParticleNoiseBuffer[objIndex];
    GroupControlParticle group = _GroupControlBuffer[gid.x];

    switch(particle.index.y){
        case 0:     //未运行时直接退出
            return;
        case 1:     //组阶段，如果不是第一个粒子就直接退出，防止异步bug
            if(index != 0)
                return;
            UpdataGroupSpeed(group, particle.random.xyz);
            if(_GroupMode.z == 1)
                group.currentSpeed += float3(0, -GRAVITY, 0) * _Time.z;
            _GroupControlBuffer[gid.x] = group;         //赋值组数据
            break;
        case 2:     //正常粒子，直接自由移动即可
            UpdataSpeed(particle);
            if(_Mode.w == 1)
                particle.nowSpeed += float3(0, -GRAVITY, 0) * _Time.z;
            _ParticleNoiseBuffer[objIndex] = particle;  //赋值单个粒子数据
            break;
    }

}
        

#pragma kernel Noise_PerFixFrameWithCollsion

[numthreads(64, 1, 1)]
void Noise_PerFixFrameWithCollsion(int3 gid : SV_GroupID, int index : SV_GroupIndex){
    int objIndex = gid.x * 64 + index;

    NoiseParticleData particle = _ParticleNoiseBuffer[objIndex];
    GroupControlParticle group = _GroupControlBuffer[gid.x];

    switch(particle.index.y){
        case 0:     //未运行时直接退出
            return;
        case 1:     //组阶段，如果不是第一个粒子就直接退出，防止异步bug
            if(index != 0)
                return;
            UpdataGroupSpeed(group, particle.random.xyz);
            if(_GroupMode.z == 1)
                group.currentSpeed += float3(0, -GRAVITY, 0) * _Time.z;
            if(CheckCollsion(group)){
                if(_GroupMode.w == 1)       //判断是否破碎后就取消组
                    group.currentMode.x = 2;
            }
            _GroupControlBuffer[gid.x] = group;         //赋值组数据
            break;
        case 2:     //正常粒子，直接自由移动即可
            UpdataSpeed(particle);

            if(_Mode.w == 1)
                particle.nowSpeed += float3(0, -GRAVITY, 0) * _Time.z;
            CheckCollsion(particle);    //普通粒子碰撞
            _ParticleNoiseBuffer[objIndex] = particle;  //赋值单个粒子数据
            break;
    }

}