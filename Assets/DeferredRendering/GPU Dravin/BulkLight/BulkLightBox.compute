#define MAX_OTHER_LIGHT_COUNT 64

int _OtherLightCount;
float4 _OtherLightColors[MAX_OTHER_LIGHT_COUNT];
float4 _OtherLightPositions[MAX_OTHER_LIGHT_COUNT];
float4 _OtherLightDirectionsAndMasks[MAX_OTHER_LIGHT_COUNT];
float4 _OtherLightSpotAngles[MAX_OTHER_LIGHT_COUNT];
float4 _OtherLightShadowData[MAX_OTHER_LIGHT_COUNT];

struct BulkLightStruct
{
	float3 boundMax;
	float3 boundMin;
	float4 lightIndex;
};


struct ComputeShaderInput
{
	uint3 GroupID           : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 GroupThreadID     : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 DispatchThreadID  : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  GroupIndex        : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};


RWStructuredBuffer<BulkLightStruct> _ClusterDataBuffer;

int _BoxCount;

bool CheckPositionInLight(float3 pos, int lightIndex) {
	float4 lightPos = _OtherLightPositions[lightIndex];
	float3 ray = lightPos.xyz - pos;

	if (dot(normalize(ray), _OtherLightDirectionsAndMasks[lightIndex].xyz)
		< _OtherLightSpotAngles[lightIndex].z)
		return false;

	float disSqr = dot(ray, ray);
	if (disSqr <= (1 / lightPos.w))
		return true;

	return false;
}



#pragma kernel CaculateBulkBox

[numthreads(64, 1, 1)]
void CaculateBulkBox(ComputeShaderInput input){
	if(input.DispatchThreadID.x > (uint)_BoxCount)
		return;

	BulkLightStruct bulk = _ClusterDataBuffer[input.DispatchThreadID.x];
	float3 bounds[8];
	bounds[0] = float3(bulk.boundMax.x, bulk.boundMax.y, bulk.boundMax.z);
	bounds[1] = float3(bulk.boundMin.x, bulk.boundMax.y, bulk.boundMax.z);
	bounds[2] = float3(bulk.boundMax.x, bulk.boundMin.y, bulk.boundMax.z);
	bounds[3] = float3(bulk.boundMax.x, bulk.boundMax.y, bulk.boundMin.z);
	bounds[4] = float3(bulk.boundMin.x, bulk.boundMin.y, bulk.boundMax.z);
	bounds[5] = float3(bulk.boundMin.x, bulk.boundMax.y, bulk.boundMin.z);
	bounds[6] = float3(bulk.boundMax.x, bulk.boundMin.y, bulk.boundMin.z);
	bounds[7] = float3(bulk.boundMin.x, bulk.boundMin.y, bulk.boundMin.z);


	int size = 0;
	bulk.lightIndex = -1;
	for(int i = 0; i < _OtherLightCount; i++){
		if(CheckPositionInLight(bounds[0], i)
			|| CheckPositionInLight(bounds[1], i)
			|| CheckPositionInLight(bounds[2], i)
			|| CheckPositionInLight(bounds[3], i)
			|| CheckPositionInLight(bounds[4], i)
			|| CheckPositionInLight(bounds[5], i)
			|| CheckPositionInLight(bounds[6], i)
			|| CheckPositionInLight(bounds[7], i))
		{
			switch(size){
				case 0:
					bulk.lightIndex[0] = i;
					break;
				case 1:
					bulk.lightIndex[1] = i;
					break;
				case 2:
					bulk.lightIndex[2] = i;
					break;
				default:
					bulk.lightIndex[3] = i;
					i = 65;
					break;
			}
			size++;
		}
	}


	_ClusterDataBuffer[input.DispatchThreadID.x] = bulk;


}