struct ThunderNode
{
    float2 begin;
    float2 end;
    float radio;
};

#pragma kernel Thunder

RWTexture2D<float> Result;
RWStructuredBuffer<ThunderNode> _ThundersBuffer;
uint _TextureSizes;

[numthreads(81,1,1)]
void Thunder (uint3 id : SV_DispatchThreadID)
{
    ThunderNode node = _ThundersBuffer[id.x];
    node.begin.y += 0.5; node.end.y += 0.5;
    int beginX = node.begin.x * _TextureSizes;
    int beginY = node.begin.y * _TextureSizes;
    int endX = node.end.x * _TextureSizes;
    int endY = node.end.y * _TextureSizes;
    float2 dir = node.end - node.begin;
    int maxCount = max(endX - beginX, endY - beginY);
    dir.xy /= maxCount * 5;     //得出每一步长的长度
    float2 currentPos = node.begin;
    for(int i = 0; i <= maxCount * 5; i++){
        int2 index = int2(currentPos.x * _TextureSizes, currentPos.y * _TextureSizes);
        Result[index] += node.radio * 0.1;
        currentPos += dir;
    }
}




#pragma kernel BilateralFilter

uint2 _BlurRadius;
float _BilaterFilterFactor;

float CompareColor(float col1, float col2)
{
	return smoothstep(_BilaterFilterFactor, 1.0, 1.0 - abs(col1 - col2));
}


[numthreads(32,32,1)]
void BilateralFilter(uint3 id : SV_DispatchThreadID){
    uint2 delta = _BlurRadius.xy;      //偏移值

    float col = Result[id.xy];
    float col0a = Result[id.xy - delta];
    float col0b = Result[id.xy + delta];
    float col1a = Result[id.xy - 2.0 * delta];
    float col1b = Result[id.xy + 2.0 * delta];
    float col2a = Result[id.xy - 3.0 * delta];
    float col2b = Result[id.xy + 3.0 * delta];


	//采集Normal的颜色值
	// float4 col =   SAMPLE_TEXTURE2D(_PostFXSource, sampler_linear_clamp, input.screenUV);
	// float4 col0a = SAMPLE_TEXTURE2D(_PostFXSource, sampler_linear_clamp, input.screenUV - delta);
	// float4 col0b = SAMPLE_TEXTURE2D(_PostFXSource, sampler_linear_clamp, input.screenUV + delta);
	// float4 col1a = SAMPLE_TEXTURE2D(_PostFXSource, sampler_linear_clamp, input.screenUV - 2.0 * delta);
	// float4 col1b = SAMPLE_TEXTURE2D(_PostFXSource, sampler_linear_clamp, input.screenUV + 2.0 * delta);
	// float4 col2a = SAMPLE_TEXTURE2D(_PostFXSource, sampler_linear_clamp, input.screenUV - 3.0 * delta);
	// float4 col2b = SAMPLE_TEXTURE2D(_PostFXSource, sampler_linear_clamp, input.screenUV + 3.0 * delta);

	float w = 0.37004405286;
	float w0a = CompareColor(col, col0a) * 0.31718061674;
	float w0b = CompareColor(col, col0b) * 0.31718061674;
	float w1a = CompareColor(col, col1a) * 0.19823788546;
	float w1b = CompareColor(col, col1b) * 0.19823788546;
	float w2a = CompareColor(col, col2a) * 0.11453744493;
	float w2b = CompareColor(col, col2b) * 0.11453744493;

	float result;
	result = w * col;
	result += w0a * col0a;
	result += w0b * col0b;
	result += w1a * col1a;
	result += w1b * col1b;
	result += w2a * col2a;
	result += w2b * col2b;

	result /= w + w0a + w0b + w1a + w1b + w2a + w2b;
    Result[id.xy] = result;
}