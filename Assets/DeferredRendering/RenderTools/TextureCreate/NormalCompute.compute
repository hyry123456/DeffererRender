#pragma kernel NormalCreate

RWTexture2D<float4> Result;
Texture2D<float4> _OriginTex;

uint2 _TextureCount;
float _NormalScale;

[numthreads(32, 32, 1)]
void NormalCreate (uint3 id : SV_DispatchThreadID)
{
    //超过范围退出
    if(id.x >= _TextureCount.x || id.y >= _TextureCount.y)
        return;
    //在边框也退出
    if(id.x == 0 || id.y == 0 || id.x == _TextureCount.x - 1 || id.y == _TextureCount.y - 1){
        Result[id.xy] = float4(0,0,1, 1);
        return;
    }
    
    float3 dirs[8] = {
        float3(0, 1, 0),
        float3(-1, 1, 0),
        float3(-1, 0, 0),
        float3(-1, -1,0),
        float3(0, -1, 0),
        float3(1, -1, 0),
        float3(1, 0, 0),
        float3(1, 1, 0)
    };
    float3 normals = 0;
    for(int i=0; i<8; i++){
        int2 index = id.xy - dirs[i].xy;
        normals += lerp(normalize(-dirs[i]) * _NormalScale, 
            float3(0, 0, 1), _OriginTex[index].w);
    }
    normals /= 8;
    normals = normalize(normals);


    Result[id.xy] = float4(normals * 0.5 + 0.5, 1);
    // Result[id.xy] = _OriginTex[id.xy].w;
}
