
Texture2D<float4> _OriginTexture;
RWTexture2D<float4> _TargetTexture;

uint2 _TextureSize;

struct ComputeShaderInput
{
	uint3 GroupID           : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 GroupThreadID     : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 DispatchThreadID  : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  GroupIndex        : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

#pragma kernel BlurHorizontal

[numthreads(32,32,1)]
void BlurHorizontal(ComputeShaderInput input){
	//超过结束
	if(input.DispatchThreadID.x >= _TextureSize.x
		|| input.DispatchThreadID.y >= _TextureSize.y) return;
	float4 color = 0.0;
	int offsets[] = {
		-4, -3, -2, -1, 0, 1, 2, 3, 4
	};
	float weights[] = {
		0.01621622, 0.05405405, 0.12162162, 0.19459459, 0.22702703,
		0.19459459, 0.12162162, 0.05405405, 0.01621622
	};

	for (int i = 0; i < 9; i++) {
		int indexX = input.DispatchThreadID.x - offsets[i];
		indexX = clamp(indexX, 0, _TextureSize.x);
		color += _OriginTexture[int2(indexX, input.DispatchThreadID.y)] * weights[i];
	}
	_TargetTexture[int2(input.DispatchThreadID.x, input.DispatchThreadID.y)] = color;
}

#pragma kernel BlurVertical

[numthreads(32,32,1)]
void BlurVertical(ComputeShaderInput input){
	//超过结束
	if(input.DispatchThreadID.x >= _TextureSize.x
		|| input.DispatchThreadID.y >= _TextureSize.y) return;
	float4 color = 0.0;
	int offsets[] = {
		-4, -3, -2, -1, 0, 1, 2, 3, 4
	};
	float weights[] = {
		0.01621622, 0.05405405, 0.12162162, 0.19459459, 0.22702703,
		0.19459459, 0.12162162, 0.05405405, 0.01621622
	};

	for (int i = 0; i < 9; i++) {
		int indexY = input.DispatchThreadID.y - offsets[i];
		indexY = clamp(indexY, 0, _TextureSize.y);
		color += _OriginTexture[int2(input.DispatchThreadID.x, indexY)] * weights[i];
	}
	_TargetTexture[int2(input.DispatchThreadID.x, input.DispatchThreadID.y)] = color;
}


#pragma kernel Copy

[numthreads(32,32,1)]
void Copy(ComputeShaderInput input){
	//超过结束
	if(input.DispatchThreadID.x >= _TextureSize.x
		|| input.DispatchThreadID.y >= _TextureSize.y) return;

	int2 id = int2(input.DispatchThreadID.x, input.DispatchThreadID.y);

	_TargetTexture[id] = _OriginTexture[id];
}