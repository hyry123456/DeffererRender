
#define _COUNT 16

float4 _UpColors[_COUNT];
float4 _DownColors[_COUNT];
float4 _LerpSizes[_COUNT];

//根据时间获取颜色
float3 LoadColor(float time_01, float4 colors[_COUNT]) {
    for (int i = 1; i < _COUNT; i++) {
        if (time_01 <= colors[i].w) {
            float radio = smoothstep(colors[i - 1].w, colors[i].w, time_01);
            return lerp(colors[i - 1].xyz, colors[i].xyz, radio);
        }
    }
    return 0;
}


//时间控制函数，用来读取Curve中的值
float LoadSize(float time_01, float4 sizes[_COUNT]) {
    //有数据才循环
    for (int i = 1; i < _COUNT; i++) {
        //找到在范围中的
        if (time_01 <= sizes[i].x) {
            //Unity的Curve的曲线本质上是一个三次多项式插值，公式为：y = ax^3 + bx^2 + cx +d
            float a = (sizes[i - 1].w + sizes[i].z) * (sizes[i].x - sizes[i - 1].x)
                - 2 * (sizes[i].y - sizes[i - 1].y);
            float b = (-2 * sizes[i - 1].w - sizes[i].z) *
                (sizes[i].x - sizes[i - 1].x) + 3 * (sizes[i].y - sizes[i - 1].y);
            float c = sizes[i - 1].w * (sizes[i].x - sizes[i - 1].x);
            float d = sizes[i - 1].y;

            float trueTime = (time_01 - sizes[i - 1].x) / (sizes[i].x - sizes[i - 1].x);
            return a * pow(trueTime, 3) + b * pow(trueTime, 2) + c * trueTime + d;

        }
    }
    return 0;
}

// float3 LoadColor_Tri(float time_01, float4 colors[_COUNT], float4 poss[_COUNT],float lerpV){
//     for (uint i = 1; i < _COUNT; i++) {
//         if (time_01 <= colors[i].w) {       //颜色处与之间
//             if(colors[i].w > poss[i].w){    //当颜色的位置大，位置的位置小，就是位置渐变到颜色的位置
//                 float range = colors[i].w - poss[i].w;
//                 float radio = smoothstep(colors[i].w - range * lerpV, colors[i].w, time_01);
//                 return lerp(colors[i - 1].xyz, colors[i].xyz, radio);
//                 return radio;
//             }
//             else{
//                 float range = poss[i].w - poss[i - 1].w;
//                 float radio = smoothstep(poss[i - 1].w, poss[i - 1].w + range * lerpV, time_01);
//                 return lerp(colors[i - 1].xyz, colors[i].xyz, radio);
//                 return radio;
//             }

//         }
//     }
//     return 0;
// }

RWTexture2D<float4> Result;


#pragma kernel RampCreate

[numthreads(32,32,1)]
void RampCreate (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    if(id.x >= width || id.y >= height)
        return;
    //uv
    float2 uv = float2((float)id.x / width, (float)id.y / height);
    //的到两边的颜色值
    float3 upColor = LoadColor(uv.x, _UpColors);
    float3 downColor = LoadColor(uv.x, _DownColors);
    //混合值
    float lerpV = LoadSize(uv.y, _LerpSizes);

    float3 final = lerp(downColor, upColor, lerpV);

    Result[id.xy] = float4(final, 1);
}

float4 _Poss[_COUNT];   //x:中心位置，y：模糊范围增加值


float3 LoadLinearColor(float time_01, float lerpV){
    for(uint i = 1; i < _COUNT; i++){
        if(time_01 < _UpColors[i].w){

            float halfRadio = (_Poss[i - 1].x - _UpColors[i - 1].w) / (_UpColors[i].w - _UpColors[i - 1].w);
            // float3 halfColor = lerp(_UpColors[i - 1].xyz, _UpColors[i].xyz, halfRadio);
            float3 halfColor = lerp(_UpColors[i - 1].xyz, _UpColors[i].xyz, halfRadio);

            if(time_01 > _Poss[i - 1].x){     //与后面的渐变
                float distance = _UpColors[i].w - _Poss[i - 1].x;
                float maxV = min(_Poss[i - 1].x + distance, _Poss[i - 1].x + distance * lerpV + _Poss[i - 1].y);
                float radio = smoothstep(_Poss[i - 1].x, maxV, time_01);
                return lerp(halfColor, _UpColors[i].xyz, radio);
            }
            else{
                float radio = smoothstep(_UpColors[i - 1].w, _Poss[i - 1].x, time_01);
                return lerp(_UpColors[i - 1].xyz, halfColor, radio);
            }
        }
    }
    return 0;
}


#pragma kernel RampLinearBlur
[numthreads(32,32,1)]
void RampLinearBlur (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    if(id.x >= width || id.y >= height)
        return;
    float2 uv = float2((float)id.x / width, (float)id.y / height);
    // float radio = smoothstep(0.5 - uv.y, 0.5 + uv.y, uv.x);
    float lerpV = LoadSize(uv.y, _LerpSizes);
    // float3 color = LoadColor_Tri(uv.x, _DownColors, _UpColors, lerpV);
    float3 color = LoadLinearColor(uv.x, lerpV);

    Result[id.xy] = float4(color, 1);
}
